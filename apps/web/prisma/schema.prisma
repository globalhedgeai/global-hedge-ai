generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  passwordHash        String
  role                Role                 @default(USER)
  createdAt           DateTime             @default(now())
  balance             Decimal              @default(0)
  firstDepositAt      DateTime?
  lastWithdrawalAt    DateTime?
  referralCode        String               @unique
  walletAddress       String?
  invitedById         String?
  auditLogs           AuditLog[]
  claims              DailyRewardClaim[]
  deposits            Deposit[]
  messages            Message[]
  messageThreads      MessageThread?
  passwordResetTokens PasswordResetToken[]
  randomBonuses       RandomBonus[]
  randomRewardClaims  RandomRewardClaim[]
  referralsAsInvitee  Referral[]           @relation("RefRelInvitee")
  referralsAsInviter  Referral[]           @relation("RefRelInviter")
  referralCodes       ReferralCode[]
  referralStats       ReferralStats?
  invitedBy           User?                @relation("Invites", fields: [invitedById], references: [id])
  invites             User[]               @relation("Invites")
  withdrawals         Withdrawal[]

  @@index([email])
  @@index([createdAt])
  @@index([invitedById])
}

model Tier {
  id          String  @id @default(cuid())
  name        String
  monthlyRate Decimal
  minInvites  Int
  maxInvites  Int?

  @@index([minInvites])
}

model Deposit {
  id             String         @id @default(cuid())
  userId         String
  amount         Decimal
  txId           String
  proofImageUrl  String
  cryptocurrency Cryptocurrency @default(USDT_TRC20)
  toAddress      String
  status         DepositStatus  @default(PENDING)
  reviewedBy     String?
  reviewedAt     DateTime?
  effectiveAt    DateTime?
  rewardAmount   Decimal        @default(0)
  rewardMeta     String?
  createdAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([effectiveAt])
}

model Withdrawal {
  id             String           @id @default(cuid())
  userId         String
  amount         Decimal
  cryptocurrency Cryptocurrency   @default(USDT_TRC20)
  toAddress      String
  status         WithdrawalStatus @default(PENDING)
  txId           String?
  reviewedBy     String?
  reviewedAt     DateTime?
  effectiveAt    DateTime?
  feePct         Decimal          @default(0)
  feeAmount      Decimal          @default(0)
  netAmount      Decimal          @default(0)
  policySnapshot String?
  appliedRule    String?
  createdAt      DateTime         @default(now())
  user           User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([effectiveAt])
}

model DailyRewardClaim {
  id        String   @id @default(cuid())
  userId    String
  amount    Decimal  @default(0)
  claimedAt DateTime @default(now())
  claimDate DateTime @db.Date
  meta      Json?
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, claimDate])
  @@index([userId])
  @@index([claimDate])
}

model RandomRewardClaim {
  id        String   @id @default(cuid())
  userId    String
  amount    Decimal
  claimedAt DateTime @default(now())
  claimDate String
  meta      Json?
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, claimDate])
  @@index([userId])
  @@index([claimDate])
}

model RandomBonus {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  amount    Decimal
  ruleId    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
}

model Referral {
  id          String    @id @default(cuid())
  inviterId   String
  inviteeId   String
  confirmedAt DateTime?
  createdAt   DateTime  @default(now())
  invitee     User      @relation("RefRelInvitee", fields: [inviteeId], references: [id])
  inviter     User      @relation("RefRelInviter", fields: [inviterId], references: [id])

  @@index([inviterId])
  @@index([inviteeId])
  @@index([createdAt])
}

model Policy {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())

  @@index([key])
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String?
  entityType String
  entityId   String
  action     String
  before     String?
  after      String?
  reason     String?
  timestamp  DateTime @default(now())
  actor      User?    @relation(fields: [actorId], references: [id])

  @@index([timestamp])
  @@index([entityType])
  @@index([actorId])
}

model Message {
  id        String      @id @default(cuid())
  userId    String?
  type      MessageType
  title     String
  body      String
  readAt    DateTime?
  createdAt DateTime    @default(now())
  user      User?       @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
  @@index([type])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model MessageThread {
  id             String          @id @default(cuid())
  userId         String          @unique
  lastMessageAt  DateTime        @default(now())
  unreadForUser  Int             @default(0)
  unreadForAdmin Int             @default(0)
  createdAt      DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id])
  messages       ThreadMessage[]

  @@index([lastMessageAt])
}

model ThreadMessage {
  id        String        @id @default(cuid())
  threadId  String
  sender    String
  body      String
  createdAt DateTime      @default(now())
  thread    MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
  @@index([sender])
}

model ReferralCode {
  id          String   @id @default(cuid())
  code        String   @unique
  ownerUserId String
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  owner       User     @relation(fields: [ownerUserId], references: [id])

  @@index([code])
  @@index([ownerUserId])
}

model ReferralStats {
  id           String   @id @default(cuid())
  userId       String   @unique
  invitedCount Int      @default(0)
  tier         Int      @default(1)
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tier])
}

model PlatformStats {
  id               String   @id @default(cuid())
  totalUsers       Int      @default(0)
  totalVolume      Float    @default(0)
  activeTrades     Int      @default(0)
  totalDeposits    Float    @default(0)
  totalWithdrawals Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
  SUPPORT
  ACCOUNTING
}

enum DepositStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MessageType {
  SYSTEM
  SUPPORT
  ANNOUNCEMENT
}

enum Cryptocurrency {
  USDT_TRC20
  USDT_ERC20
  BTC
  ETH
  BNB
  ADA
  SOL
  MATIC
  AVAX
  DOT
}
