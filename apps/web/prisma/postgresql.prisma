generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

enum Role {
  USER
  ADMIN
  SUPPORT
  ACCOUNTING
}

enum DepositStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MessageType {
  SYSTEM
  SUPPORT
  ANNOUNCEMENT
}

enum Cryptocurrency {
  USDT_TRC20
  USDT_ERC20
  BTC
  ETH
  BNB
  ADA
  SOL
  MATIC
  AVAX
  DOT
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  passwordHash     String
  role             Role      @default(USER)
  createdAt        DateTime  @default(now())
  balance          Decimal   @default(0)
  firstDepositAt   DateTime?
  lastWithdrawalAt DateTime?
  referralCode     String    @unique
  walletAddress    String?
  invitedById      String?
  invitedBy        User?     @relation("Invites", fields: [invitedById], references: [id])
  invites          User[]    @relation("Invites")

  deposits            Deposit[]
  withdrawals         Withdrawal[]
  claims              DailyRewardClaim[]
  randomRewardClaims  RandomRewardClaim[]
  messages            Message[]
  messageThreads      MessageThread[]
  referralsAsInviter  Referral[]           @relation("RefRelInviter")
  referralsAsInvitee  Referral[]           @relation("RefRelInvitee")
  randomBonuses       RandomBonus[]
  auditLogs           AuditLog[]
  passwordResetTokens PasswordResetToken[]
  referralStats       ReferralStats?
  referralCodes       ReferralCode[]

  @@index([email])
  @@index([createdAt])
  @@index([invitedById])
}

model Tier {
  id          String  @id @default(cuid())
  name        String
  monthlyRate Decimal
  minInvites  Int
  maxInvites  Int?
}

model Deposit {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  amount        Decimal
  txId          String
  proofImageUrl String
  cryptocurrency Cryptocurrency @default(USDT_TRC20)
  toAddress     String
  status        DepositStatus @default(PENDING)
  reviewedBy    String?
  reviewedAt    DateTime?
  effectiveAt   DateTime?
  rewardAmount  Decimal       @default(0)
  rewardMeta    String?
  createdAt     DateTime      @default(now())

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([effectiveAt])
}

model Withdrawal {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  amount         Decimal
  cryptocurrency Cryptocurrency  @default(USDT_TRC20)
  toAddress      String
  status         WithdrawalStatus @default(PENDING)
  txId           String?
  reviewedBy     String?
  reviewedAt     DateTime?
  effectiveAt    DateTime?
  feePct         Decimal          @default(0)
  feeAmount      Decimal          @default(0)
  netAmount      Decimal          @default(0)
  policySnapshot String?
  appliedRule    String?
  createdAt      DateTime         @default(now())

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([effectiveAt])
}

model DailyRewardClaim {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Decimal
  claimDate DateTime @db.Date
  createdAt DateTime @default(now())

  @@unique([userId, claimDate])
  @@index([userId])
  @@index([claimDate])
}

model RandomRewardClaim {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Decimal
  depositId String?
  createdAt DateTime @default(now())
}

model RandomBonus {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  amount    Decimal
  ruleId    String?
  createdAt DateTime @default(now())
}

model Referral {
  id          String    @id @default(cuid())
  inviterId   String
  inviteeId   String
  inviter     User      @relation("RefRelInviter", fields: [inviterId], references: [id])
  invitee     User      @relation("RefRelInvitee", fields: [inviteeId], references: [id])
  confirmedAt DateTime?
  createdAt   DateTime  @default(now())
}

model ReferralCode {
  id           String   @id @default(cuid())
  code         String   @unique
  ownerUserId  String
  owner        User     @relation(fields: [ownerUserId], references: [id])
  createdAt    DateTime @default(now())
  isActive     Boolean  @default(true)

  @@index([code])
}

model ReferralStats {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  invitedCount Int      @default(0)
  tier         Int      @default(1)
  updatedAt    DateTime @default(now())

  @@index([userId])
}

model Policy {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String?
  actor      User?    @relation(fields: [actorId], references: [id])
  entityType String
  entityId   String
  action     String
  before     String?
  after      String?
  reason     String?
  timestamp  DateTime @default(now())

  @@index([timestamp])
  @@index([entityType])
  @@index([actorId])
}

model Message {
  id        String      @id @default(cuid())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  threadId  String?
  thread    MessageThread? @relation(fields: [threadId], references: [id])
  content   String
  type      MessageType @default(SUPPORT)
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
}

model MessageThread {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  subject   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
